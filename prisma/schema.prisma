// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL
  KAKAO
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  nickname      String         @unique
  provider      AuthProvider
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  reviews       Review[]
  followings    Following[]    @relation("User")
  followers     Following[]    @relation("Following")
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  actorId   String           @db.Uuid
  objectId  String           @db.Uuid
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
}

model Review {
  id        String       @id @default(uuid()) @db.Uuid
  files     ReviewFile[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  user      User         @relation(fields: [userId], references: [id])
  userId    String       @db.Uuid
  stars     Int
  content   String       @db.VarChar(1000)

  withs   ReviewWith[]
  tags    ReviewTag[]
  place   Place        @relation(fields: [placeId], references: [id])
  placeId String       @db.Uuid
}

model ReviewFile {
  id       String @id @default(uuid()) @db.Uuid
  url      String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String @db.Uuid
}

model ReviewWith {
  reviewId String @db.Uuid
  with     String
  review   Review @relation(fields: [reviewId], references: [id])

  @@id([reviewId, with])
}

model ReviewTag {
  tag      String
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String @db.Uuid

  @@id([tag, reviewId])
}

model Place {
  id      String   @id @default(uuid()) @db.Uuid
  address String
  name    String
  lat     Float
  lng     Float
  reviews Review[]
}

model Following {
  id          String @id @default(uuid()) @db.Uuid
  following   User   @relation(fields: [followingId], references: [id], name: "Following")
  followingId String @db.Uuid
  User        User   @relation(fields: [userId], references: [id], name: "User")
  userId      String @db.Uuid

  @@unique([followingId, userId])
}
